// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// docker/go-fuzz.dockerfile
// docker/go-fuzz.sh
// fuzzing/common.go
// fuzzing/utils.go
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xeb\x30\x10\x85\xf7\x7a\x8a\x03\x77\x2d\x1b\xc3\x0d\x85\x40\x37\x4d\xda\x12\xda\xc4\xc5\x10\x4a\x97\xb2\xf5\x8b\x65\x8d\x88\xa4\x94\xe6\xe9\x8b\x4d\x03\xe9\xae\x2b\x89\x99\x39\x1f\xdf\x79\xea\xda\x3d\x0c\x79\x11\xcc\xba\xa9\x9a\xff\x5c\xf8\xe8\x82\x62\xec\x1f\x76\x21\x65\xe1\x3d\xa4\x8a\x09\x22\x48\x94\xa4\x74\xf1\xc8\xd6\x05\x93\x58\x77\x3c\x40\xc4\x11\x42\x4a\xf4\xc5\x79\xc9\x7b\x91\x14\xe2\x68\x06\x0a\xda\x19\xf4\x22\x59\x9c\xdd\x04\xe3\xf2\x2d\xcf\x10\xd7\xe5\x72\x59\x00\xcf\x6d\xd3\x34\xfb\x76\x7b\x7c\x7d\xbc\x27\xad\x61\x08\x46\x65\xf0\x32\x87\x6c\xe9\xab\x81\xa6\x5a\x9e\xbf\xca\x48\xe7\xfa\x27\x78\x7d\xff\x70\xc2\x17\x31\xf6\xde\x76\x2f\xdb\x5d\x87\x3a\x4f\xb1\x9e\xe7\x2e\x98\xd9\xe8\xf0\xb0\x86\xa6\xd3\x5c\x0c\x9f\x2e\x5b\x48\x1a\x46\x75\xe2\x03\x4d\x91\x92\x62\x9b\xf6\xed\x03\xd5\x15\x56\x25\x8b\x9b\xff\xe2\x3f\xd8\x89\x24\xee\x56\xab\x5f\x1b\xb6\xd9\x6f\x97\xfa\xec\x3b\x00\x00\xff\xff\x7b\x8f\x6d\x78\x5f\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 351, mode: os.FileMode(420), modTime: time.Unix(1600679318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xc1\x6e\xdb\x3a\x10\xbc\xef\x57\x4c\x6c\x21\x88\x1f\x1e\xe5\x97\x1c\xe3\xa7\xa0\x2d\x8a\x5e\x73\xe9\xcd\x30\x62\x4a\x5a\x49\x84\x19\x52\x20\xa9\x18\x89\xe3\x7f\x2f\x48\xc9\x36\xe2\x9e\x44\x0d\x76\x77\x66\x67\x67\x7e\x83\xe5\xe0\xdd\xb2\x54\x66\xc9\xe6\x0d\xa5\xf4\x1d\x79\x0e\x10\x4c\x34\xc7\xef\xe7\x9f\xcf\x8f\x70\xdc\x6b\x59\x31\x42\xa7\x3c\x7c\xc7\x5a\xc3\x57\x4e\xf5\x81\xe6\xc8\xee\x21\xd0\x0c\x1f\x1f\xec\xd0\xcb\x6a\x27\x5b\x8e\xe8\x03\x04\x8c\x7c\x65\xd8\x06\xa1\xe3\x53\x45\x33\x98\x2a\x28\x6b\x70\xb7\x57\x5a\xa3\x64\x0c\x9e\x6b\x34\xd6\xa5\xaa\xed\xde\xba\x5d\xad\xdc\x16\xd2\xb5\xc3\x2b\x9b\x80\x60\xb1\x6d\xad\x88\xfd\xdb\x45\x4e\x73\x6c\x85\x28\x07\xa5\xeb\x2d\x04\xee\x6c\x1f\xa7\x49\xbd\x40\xc2\xfc\x95\x12\x94\xdc\x58\x17\x3f\xca\xb4\x70\x83\x89\x03\xbe\xd7\xb5\x1a\xbb\x22\x8b\x47\x63\xb5\xb6\xfb\x58\xb0\x15\x22\x32\x33\x7a\xe9\xa3\xac\x5a\x39\xae\x82\x7e\xff\x22\x22\x27\x52\x0d\xd6\x6b\x64\x73\x08\x1d\xf0\x80\xcd\x66\x15\xd5\x1b\x02\xb8\xea\x2c\x66\x83\x97\x2d\x3f\x82\x4d\x70\xef\xbd\x55\x26\xe4\xbe\xc3\xff\x57\xd2\x7a\x19\xba\xa7\x33\x1a\x8d\x49\x86\x3d\x61\x2d\xca\xcf\x69\xc7\x0d\xd6\x42\x60\x3d\x51\x47\xb9\xeb\x7f\x91\xe7\xf9\x66\xb3\x99\x51\xa3\x88\xfa\x5d\x5b\x64\xf7\xe4\x3b\xd5\x04\x8a\xed\x97\xbf\xd3\xf1\x06\x53\xdb\xf1\x72\x9d\xac\x76\x39\x4d\x16\x17\xf9\xb2\xd1\xcc\x15\x2f\x27\xc0\x2f\xb3\x43\x9c\x70\xa4\x52\x99\x22\x3b\xf4\xbb\xf6\xf1\xe1\x98\x88\xf3\x0f\xd5\x47\xf4\x25\x6a\x2e\xb2\xc3\xd4\x71\x5c\x66\x87\x52\x99\x23\x51\x27\xfd\x4b\x14\x1c\x8a\x46\x6a\xcf\x94\xc4\xdf\x2d\x70\x20\x60\x12\x3f\x2e\x84\x34\xf7\x48\xc0\xeb\xdb\xf4\x3e\x33\x20\x4d\x4b\x1c\x47\x3a\x12\xed\x3b\xa5\xf9\x64\x74\x1b\xf0\x5f\x32\xba\xb6\x04\x54\xd2\x73\x4c\x9e\x8a\x9e\x8b\x12\x9f\x98\x0c\x5b\x10\x70\xba\xc2\x8f\x08\xc4\xb3\x26\xef\x4a\x65\xa4\x7b\xcf\xf3\x7c\x96\x4a\x52\x75\x7a\x5d\xb4\x07\x37\x70\x82\x46\x03\xe3\x6b\xb5\x8a\x04\x62\x71\x05\x3b\xf6\xe1\x25\x86\xa7\xc8\xbe\x8d\xe3\x1c\xcb\xdd\xa5\xe3\x9f\xeb\x86\x84\xb2\x97\x15\xd5\xd6\xf0\x39\x41\x67\x6e\x14\x05\x66\xc9\xbb\x19\x6e\x6f\x71\x03\xc1\xc8\x4e\x6e\xfc\x1d\xb0\x5f\x97\x8d\x60\x6c\x40\x63\x07\x53\xaf\xc6\xa5\x94\x69\xa7\x2d\xc7\x1d\x63\x4c\xbe\xe8\xa5\x53\x9c\xc4\x78\xe8\xb3\xe9\x10\x31\x85\xc5\x14\x03\x88\x53\x52\x2e\x07\x47\x76\x9e\x44\x7f\x02\x00\x00\xff\xff\xdd\x35\x6b\x49\x3a\x04\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 1082, mode: os.FileMode(493), modTime: time.Unix(1600683616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fuzzingCommonGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xdd\x6f\xdc\xc6\x11\x7f\xe6\xfe\x15\x13\x02\x91\xc9\xf8\xc4\x6b\xfa\x78\xed\xbd\xd4\x8e\x02\x15\xb5\x6c\xa4\x06\xf2\x60\x1b\xcd\x1e\x39\xbc\x5b\x88\xb7\x7b\xd9\x1d\x4a\x91\x1c\xfd\xef\xc5\xec\x07\xbf\x4e\x6a\x8a\xf6\x00\x09\xdc\xe5\xec\x7c\xfc\x76\xe6\x37\xc3\xf5\xfa\xf5\xae\x57\x5d\x03\x7b\xd3\xf6\x8f\x8f\x42\x9c\x64\x7d\x2b\xf7\x08\xbc\x52\x7a\x2f\x84\x3a\x9e\x8c\x25\x28\x44\x96\xb7\x47\xca\x45\x96\x2b\xb3\x56\xa6\x27\xd5\xf1\xc2\x38\xfe\x7f\x92\x74\x58\xb7\xaa\x43\x7e\xe0\x0d\x8b\x6d\x87\xb5\x17\x27\x74\xa4\xf4\x3e\x17\x22\xcb\xf7\x8a\x0e\xfd\xae\xaa\xcd\x71\xed\xc8\x22\xd5\x07\xbb\xf6\xef\xdb\x87\xb5\xc5\x5f\x7b\x65\x31\x17\xa5\x10\xeb\x35\x5c\xf5\x8f\x8f\x50\x1b\xed\x48\x6a\x72\xd0\x1a\x0b\x7b\x73\xc9\x6e\x01\x19\xe8\x1d\xc2\xfd\x01\x35\x58\xa4\xde\x6a\xa5\xf7\xd0\x5a\x73\x04\x3a\x60\x38\xd9\xf6\xba\x16\x77\xd2\xb2\xe3\xbc\x71\xad\x09\x6d\xf0\x04\xb6\xf0\x7d\xd8\xbc\x31\xf6\x28\x3b\xf0\xbf\x2d\xfc\x29\x6c\xbe\x55\xae\x96\xb6\x89\x9b\x97\xdf\x47\x7f\xde\x58\xe9\x0e\x68\xc1\xe2\xc9\xa2\x43\xf6\x49\x0e\x1e\xe5\x75\x78\x9b\x43\x21\x35\x28\x7d\xea\x09\xe8\x20\x09\xc2\x7e\xe3\xfd\xb2\xe8\x4e\x58\x93\xba\x43\xb1\x5e\x67\x6d\xf2\x92\x94\xd1\xe5\x0a\x14\x39\xa8\x8d\x65\x21\xa3\x1b\x76\xd3\xf4\xc4\x7a\x8a\x93\xd4\xaa\x86\x23\x3a\x27\xf7\x58\xae\x40\xea\x06\xb4\x3c\x22\x14\xc1\xd0\x41\xba\x43\x59\x09\x7a\x38\xe1\xe0\xa5\x23\xdb\xd7\x04\x5f\x45\x76\xc3\x92\xfc\x73\x64\xf9\x42\xb3\x6b\x7f\x08\x00\x3e\x7d\xd9\x3d\x10\x8a\xec\x7d\xb0\x33\x4a\x30\x0a\x57\xbd\xae\x21\x3d\x88\xa7\x29\x04\xd7\x84\x56\x92\xb1\xa0\x1c\x70\xb4\x69\x39\xbd\xa2\x04\x88\xcb\xa1\x33\xb5\x24\x6c\x40\x69\x46\x81\x43\x1f\x81\x80\x19\x0a\xaf\x1c\xdc\x1b\x7b\xcb\xb1\x37\xca\x62\x4d\xc6\x3e\xcc\xe3\x1a\x4c\x8f\xf1\x29\x18\x7e\x4a\x93\xc8\x94\x6e\x8d\x0b\xeb\x4f\x5f\x8c\xab\xae\x54\x87\xd7\xba\x35\xc2\x23\xee\xc3\x82\x31\xb0\x2c\xfa\xf9\x56\xd9\x14\xfe\x93\x08\x26\x07\x14\xd8\xbd\x22\x80\x55\x7a\x1b\xfe\xf5\x4f\x58\x9b\x3b\xb4\x6f\x64\xd7\xed\x64\x7d\x1b\xa4\xfc\x55\xbd\x73\xfb\xa8\x2b\x64\xce\x0d\xde\x2f\xdc\xbf\x32\x36\x26\xee\x39\x82\x09\xb8\x90\x3f\x9d\x7c\x54\xdd\x03\x74\x46\x36\x2e\xa3\x03\x2a\x1b\xb2\xcb\xf9\x2c\x08\x19\xe2\x2a\xc1\xc6\x9f\xb1\x53\xb4\xcb\x9b\x2c\xa1\xf8\x6e\x21\xb4\x02\xb4\xd6\xd8\x92\xc1\xf4\x69\xb5\xd9\xc2\x8f\x48\x2c\xcd\xb9\x33\xe8\x28\x45\xc6\xb7\xd3\x28\x1b\x25\x7e\x0e\xab\x82\x0f\x95\x33\x24\xc3\xfb\x37\xc3\xc6\x42\x84\xaf\xc3\x79\xb3\x2c\x19\xb8\xa4\xfa\x09\x65\xc3\xa2\xa3\x9a\x52\x64\xaa\xf5\x52\xdf\x6c\x41\xab\x8e\x1d\xcc\x02\x6c\xbc\xf4\x0a\x44\xf6\x24\xd2\xde\xc5\x22\x30\x16\xf7\xd9\xb0\x09\xe9\x30\xb3\x2e\xb2\x89\xc3\x1b\x48\xdc\x55\xfd\xdd\x28\x5d\xc4\x38\x57\x93\x34\x2e\xf9\x44\x82\x82\x15\xa6\xe7\x95\xc8\x9e\x56\xec\x4f\x2c\x92\x77\xbd\xa3\xf3\x9b\xf8\xe3\xeb\xde\xf5\x04\x3e\x7d\x1c\xa8\x96\xc5\xfc\xad\x80\xa9\xeb\xde\xa6\x1b\x7e\x5e\xf7\x73\xb7\xbc\xbc\x64\x5f\x29\x84\x76\x40\xfd\x3f\xa8\x79\x16\x77\xef\x5a\x81\x96\x6f\x65\x84\x9c\x55\xc6\xb8\x63\x3d\x30\x29\x28\x4d\xa8\x1b\x66\x3d\x03\x3b\x84\x06\x5b\xb4\x16\x9b\x0a\xae\x09\x6a\xd9\x75\x2e\xd2\x61\x38\x50\xa7\x0a\xba\x57\x74\x48\x14\x11\xea\x67\x24\x5b\xc9\xfc\x00\xa6\x9d\x9e\xc4\x06\xee\x64\xd7\x63\x64\x16\xc0\x3b\xd4\xc4\x32\x32\x00\x19\x41\x4b\x19\x35\x60\x52\x26\x5f\x8b\xa8\xe8\xcd\x6e\x59\xcd\xbe\x18\x54\x0b\x1e\xaa\x28\x55\x94\x7f\x81\x45\x2a\xc6\xd3\x45\x7b\xa4\xea\x9f\x27\xab\x34\x15\xb6\xf4\x00\x05\x4c\x3e\xa2\x9b\x46\x3c\xdc\xf5\x8c\xf5\x3c\xf3\x07\x26\xe7\x9a\x8e\x5a\x5d\xe8\x67\x21\x23\x18\x91\x84\x0e\x9c\xa4\x73\xd8\x9c\xc1\xf7\x72\xb4\xec\xc5\x1f\x84\xea\xaf\x28\xf9\x57\x9d\xc1\x33\x96\x6e\x95\x52\x2c\xd9\xa9\x7c\x3b\x29\x63\xc0\x37\xf8\x1b\xc1\x1e\x29\xc4\xab\x79\x95\xfc\xe1\xd8\x94\xae\x2d\x1e\x7d\xef\xe4\xf7\xa9\x10\x92\xeb\xbc\x3e\xcb\xdc\xd2\x2b\x2d\x4a\x28\xbc\xba\xf4\x7a\x05\x8d\xd1\x08\x3b\x63\x02\x11\x4c\x48\x8c\xfd\xf8\xdb\xc6\x6b\xaf\x42\x37\xa8\x8d\x26\xa9\x74\x84\x79\x15\x79\x33\x74\xd2\x5f\x7b\x13\xba\x13\x5f\x00\xd3\x80\xab\x58\x45\xf6\x33\xc2\xbd\xd4\xc4\x39\xec\x6e\xd5\x09\xb4\xd1\x97\x73\x21\x2e\xdf\x6f\xbc\x17\x89\x69\x3c\x9d\x0d\x66\x3f\x85\xc7\x2f\x22\x1b\x78\x95\xf7\x2b\xcf\xaa\x25\x1f\x69\xc3\xc6\xb5\x63\xe2\x2b\xe1\xf7\xdf\x47\x1e\xfa\xe1\x37\x0a\xac\xc9\x19\x97\xe7\xde\x44\x16\x14\xbe\x7e\xcd\xcf\xde\x70\x32\x07\xdb\x2d\x74\xa8\x8b\xd1\x78\x79\xf9\x67\x96\xe2\xc8\x95\xee\x51\x64\xd9\x93\xf0\x5e\xfa\xc0\xcf\xa9\x97\xdb\x64\x31\x67\x41\xaf\x6c\x24\xc9\x95\x1f\x3a\xca\xe8\xf8\x82\x1e\x66\xbc\xcc\xae\x45\x76\x0e\x56\x13\xde\xff\x87\x59\x78\x0d\x79\x15\xf4\xe4\xff\x8b\x0b\x3e\x79\xb6\x43\x8f\xf0\x07\xf8\x22\x42\x6f\x60\x13\x4c\xf0\x61\x38\xda\x84\x61\x82\x5d\xe6\xbd\x30\x1f\x6d\x86\x01\xa9\x08\x6e\xf8\x8e\x30\xcc\x4a\x31\xdf\x26\x5d\x21\x02\x3e\x5e\xd9\x7f\x75\x63\x3b\x8b\xf2\x76\x4a\xb1\xec\x78\x8a\x67\xec\x32\x5c\xd3\x57\x52\x75\x4a\xef\xff\xa1\x8e\x8a\x80\xa7\x68\x07\x28\xeb\x43\xaa\xb8\x57\x03\xab\xec\x39\xf7\xc9\xf3\xcc\x62\xf4\x0a\x83\x68\xe4\xa1\x5e\x93\xea\x40\x11\x38\x44\x07\xbf\x74\xac\xf7\x17\x68\x83\x95\x38\x76\x4c\x2b\xf5\xac\x50\x97\x4e\x15\x04\xdf\xc5\xe9\xbf\xfa\xb8\x02\xaf\x90\x9b\x43\x09\xc5\xbf\x26\x85\x9c\xba\x9e\xa6\x15\x90\x21\xd9\x05\x99\xaf\xe3\xbc\x30\x9d\x54\x5e\x68\x5e\x33\xf4\x4b\x46\xcf\x7f\x4d\x54\x37\xe6\x07\x26\x86\x22\x64\x5f\x29\x3c\x3d\x7c\x7c\xff\xf6\xfd\x06\x4e\xd2\xca\xae\xc3\x4e\x3d\xa2\xc8\xf8\x53\x21\x80\xdc\xa8\xe6\x83\x9f\xb8\x99\x5b\xc2\x8b\x56\x59\x47\x83\xbf\x4b\x86\x9d\x32\xc1\xc5\x45\x0a\xe7\xaf\x31\xde\xaf\xe3\xa4\x31\x49\x4b\xd8\xc2\x22\xb8\x2a\xd0\x9c\xef\x2b\x2f\xb9\x9e\x0d\xbe\x6d\xa1\x95\x9d\xc3\x51\x77\xe5\x59\xfe\xd9\x21\x34\x54\xc7\xe4\x28\x59\x4f\x08\x5c\x43\xd3\xc8\x38\x25\xb9\x98\x2e\x2e\x86\x10\xa7\xe5\x95\xcd\x65\x93\x0c\xbf\x7a\xe2\x6c\x8f\x55\x39\xd8\xf1\x87\x02\x18\x3e\xfd\x59\xc8\x5f\x2f\xaf\xb8\x36\xb8\x6b\x7e\xe0\xa6\xd9\x16\xf9\xf0\xdd\xd2\x1f\x8f\xd2\x3e\x6c\x3e\xeb\xed\xfc\xf7\x59\x73\xd9\x4f\x8f\x5c\xfa\x4e\xa8\xf4\x7e\x03\xdf\x36\x9f\x75\x1e\x93\xe7\x32\x98\x3c\x13\x8e\x79\x3c\x08\xbf\x20\xe6\x75\xcc\x35\x32\xf2\x4b\xa8\x26\xc0\x0c\xe7\x3b\x5d\xe4\x9e\x9b\xa6\x1a\x7d\x47\xf4\xb6\xfc\x77\x4d\x04\x6d\x03\xdf\xba\xcf\x9a\xff\xf2\xd5\x4c\xb1\x6f\x0e\x8b\xad\xc0\x3f\xb3\xb9\x6b\x9e\x90\x21\x94\xe8\x2d\x13\x84\x2f\xd2\xc5\x84\x3e\x64\x43\x1c\xad\xbe\x8a\xec\x74\xbb\xff\x20\xe9\x10\x66\x1c\xff\xbd\x5e\x7d\x7c\x38\xe1\xfb\xb6\x48\x2c\xf9\x54\x56\x1f\x82\x10\x67\xe6\xd1\x34\xfc\x38\x94\xe1\x8f\x48\xef\xc2\x56\x11\x55\x3d\x3b\x3a\xc6\x7e\x7c\xfd\xea\x08\x27\x8b\x44\x0f\xe0\x7a\x8b\x40\x07\xe5\xc0\x1d\x4c\xdf\x35\xfa\x15\xf1\xa0\x78\x32\xce\xa9\x5d\x87\x67\xe3\xe6\x24\xee\x69\xa7\x18\xfc\xc9\xdb\x0e\xb1\xc6\x7c\x05\x79\x1c\xdd\x5d\x1e\xfb\xc6\x14\x8e\xc5\x07\xc9\x33\x88\x3c\x6b\x66\xf9\xa9\x33\xfb\x2c\x10\x4f\xe2\xdf\x01\x00\x00\xff\xff\x83\xd6\xab\x95\x44\x11\x00\x00")

func fuzzingCommonGoBytes() ([]byte, error) {
	return bindataRead(
		_fuzzingCommonGo,
		"fuzzing/common.go",
	)
}

func fuzzingCommonGo() (*asset, error) {
	bytes, err := fuzzingCommonGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fuzzing/common.go", size: 4420, mode: os.FileMode(420), modTime: time.Unix(1600694133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fuzzingUtilsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x4f\xdc\x3c\x10\xc6\xcf\xf1\xa7\x98\x37\x12\xaf\x62\x75\x95\xc0\x15\x89\x5e\x28\xf4\x52\xe8\x4a\x95\x7a\x41\x1c\x4c\x3c\x76\xac\x75\x3c\xa9\xe3\xf0\x7f\xbf\x7b\x35\xde\x64\x01\x69\x91\x7a\x8a\x33\x33\x9e\xe7\xf7\xd8\x9e\xa6\xf9\x72\x37\x39\xaf\xc1\x92\x99\x9e\x9f\x85\x18\x54\xbb\x51\x16\x81\xff\x5c\xb0\x42\xb8\x7e\xa0\x98\xa0\x12\x45\x89\x31\x52\x1c\x4b\x51\x94\xa6\x4f\xfc\x19\x54\xea\x1a\xe3\x3c\xf2\x82\x03\x11\x8d\xc7\x36\xe7\xe2\x14\x92\xeb\xb1\x14\xa2\x28\x2d\x79\x15\x6c\x4d\xd1\x36\x8f\x4d\x22\xf2\x63\x63\xa9\x99\xa5\xc6\x52\x48\x21\xd2\xd3\xb0\x13\xbd\x9c\x42\x0b\x66\x0a\x6d\x75\x73\x7b\xf7\x94\x50\x82\x0b\x49\x08\x8e\xc0\x77\x4c\x57\xa4\xd7\x2a\x75\xd5\x0e\x8b\x97\x30\xa6\xe8\x82\x95\x50\xed\x16\x2b\xc8\x9c\x12\x5e\x44\xd1\x93\x46\x38\x3d\x83\x45\xaa\xbe\x46\xd4\xd7\xaa\x47\x78\xfd\x18\xbb\x22\x3d\x79\x14\xc5\xb0\xb1\xe7\x14\x8c\xb3\xbc\xeb\xff\x7d\xc9\x2e\xf6\x72\x45\x1a\x4f\x81\x9b\x6e\x73\xe9\x98\xb5\x3e\x08\xfc\x20\xa5\xab\x7d\x97\x15\xbc\x71\x4a\x51\x38\x93\xeb\xff\x3b\x83\xe0\x3c\xf3\x15\x11\xd3\x14\x03\x94\x65\xee\x24\x8a\x6d\x2e\xf2\x18\xb8\xc7\x28\xe1\x2b\x9c\x1c\xa8\xa3\xc8\xd4\x0f\x95\xe9\x53\xfd\x6b\x88\x2e\x24\x53\x89\xa2\x28\xca\x9e\x22\x42\xea\x54\x00\x0a\xb8\x40\x41\xaf\x52\xdb\xa1\x86\x41\xa5\x84\x31\xc0\xd1\x9f\x72\xc5\xe5\x6f\x6c\xfc\x2b\x25\xcb\x67\x5f\xd9\xd1\xc6\x8e\x37\xc7\xb7\x99\x67\xd8\xd8\xfa\x22\xcb\x2e\xec\xaf\xaf\x0b\xe4\x9c\x90\x9c\x39\xce\xac\x18\xe3\x39\x4d\x21\x7d\x38\x97\x35\x53\xee\x4a\x77\xd6\xfe\xdd\xd4\x91\x9e\xd3\x80\xa1\xe5\xc6\x18\x51\xc3\x43\xe7\x3c\x82\x27\xa5\x5d\xb0\x7b\xab\x0f\x2e\x75\xf3\x99\xb3\xdd\x6e\xef\x75\x81\x7a\x7f\x23\xef\x5d\xf7\xa4\x67\xd7\xf5\xf2\x16\x9c\xe1\xab\x86\xb3\xcf\x6e\xeb\x53\xe0\x29\xa8\x3b\x8f\x90\x28\xe3\x71\x93\xc9\x23\x18\x8a\x7b\x4c\x95\x0e\x42\x1e\x46\x9b\x55\x7b\xd2\xf5\x37\x17\x57\x4c\x23\xb6\x6f\x13\xc1\x03\xc3\x4f\xba\x32\x3c\x29\x18\x8d\x6a\xf1\x65\x2b\xe7\xb1\x60\xee\x7b\xe5\xd9\xdb\x3c\x9c\xf5\x6f\xe5\x27\xfc\x69\x2a\x23\x45\xa1\xb4\xce\xef\xf7\x5e\xf9\x7a\x4d\x79\x7f\x25\xf7\x92\xcb\x68\xd7\x17\x8f\xa9\x9a\x07\xba\x66\xbd\x4b\x8a\xeb\xf3\x8a\x37\xcb\x3a\x6b\x4b\x79\x73\x72\x7a\x2b\xb6\xe2\x6f\x00\x00\x00\xff\xff\x4c\xd8\x6d\xee\x51\x04\x00\x00")

func fuzzingUtilsGoBytes() ([]byte, error) {
	return bindataRead(
		_fuzzingUtilsGo,
		"fuzzing/utils.go",
	)
}

func fuzzingUtilsGo() (*asset, error) {
	bytes, err := fuzzingUtilsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fuzzing/utils.go", size: 1105, mode: os.FileMode(420), modTime: time.Unix(1600694020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
	"fuzzing/common.go":         fuzzingCommonGo,
	"fuzzing/utils.go":          fuzzingUtilsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
	"fuzzing": &bintree{nil, map[string]*bintree{
		"common.go": &bintree{fuzzingCommonGo, map[string]*bintree{}},
		"utils.go":  &bintree{fuzzingUtilsGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
