// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// bindata/docker/go-fuzz.dockerfile
// bindata/docker/go-fuzz.sh
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xeb\x30\x10\x85\xf7\x7a\x8a\x03\x77\x2d\x1b\xc3\x0d\x85\x40\x37\x4d\xda\x12\xda\xc4\xc5\x10\x4a\x97\xb2\xf5\x8b\x65\x8d\x88\xa4\x94\xe6\xe9\x8b\x4d\x03\xe9\xae\x2b\x89\x99\x39\x1f\xdf\x79\xea\xda\x3d\x0c\x79\x11\xcc\xba\xa9\x9a\xff\x5c\xf8\xe8\x82\x62\xec\x1f\x76\x21\x65\xe1\x3d\xa4\x8a\x09\x22\x48\x94\xa4\x74\xf1\xc8\xd6\x05\x93\x58\x77\x3c\x40\xc4\x11\x42\x4a\xf4\xc5\x79\xc9\x7b\x91\x14\xe2\x68\x06\x0a\xda\x19\xf4\x22\x59\x9c\xdd\x04\xe3\xf2\x2d\xcf\x10\xd7\xe5\x72\x59\x00\xcf\x6d\xd3\x34\xfb\x76\x7b\x7c\x7d\xbc\x27\xad\x61\x08\x46\x65\xf0\x32\x87\x6c\xe9\xab\x81\xa6\x5a\x9e\xbf\xca\x48\xe7\xfa\x27\x78\x7d\xff\x70\xc2\x17\x31\xf6\xde\x76\x2f\xdb\x5d\x87\x3a\x4f\xb1\x9e\xe7\x2e\x98\xd9\xe8\xf0\xb0\x86\xa6\xd3\x5c\x0c\x9f\x2e\x5b\x48\x1a\x46\x75\xe2\x03\x4d\x91\x92\x62\x9b\xf6\xed\x03\xd5\x15\x56\x25\x8b\x9b\xff\xe2\x3f\xd8\x89\x24\xee\x56\xab\x5f\x1b\xb6\xd9\x6f\x97\xfa\xec\x3b\x00\x00\xff\xff\x7b\x8f\x6d\x78\x5f\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 351, mode: os.FileMode(420), modTime: time.Unix(1601023346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x4d\x6f\xe3\x36\x10\xbd\xf3\x57\xbc\x95\x85\xdd\xb8\x08\xa5\x26\xc7\xb8\x5a\xb4\x45\xd1\xeb\x5e\x7a\x33\x0c\x9b\x92\x46\x12\x61\x85\x14\x48\xaa\x46\xe2\xf8\xbf\x17\x43\x49\x76\xe3\x3d\x45\x19\x0f\xdf\xbc\xaf\xd5\x17\xe4\xa3\x77\x79\xa9\x4d\x4e\xe6\x5f\x94\xca\x77\xc2\x53\x80\x24\x21\x56\xf8\xe7\xc7\x5f\x3f\x5e\xe0\x68\xe8\x55\x45\x08\x9d\xf6\xf0\x1d\xf5\x3d\x7c\xe5\xf4\x10\xc4\x0a\xe9\x13\x24\x9a\xf1\xfd\x9d\x1c\x06\x55\x1d\x55\x4b\x3c\x7d\x86\x84\x51\xaf\x04\xdb\x20\x74\xb4\x6c\x34\xa3\xa9\x82\xb6\x06\x0f\x27\xdd\xf7\x28\x09\xa3\xa7\x1a\x8d\x75\x71\xeb\x70\xb2\xee\x58\x6b\x77\x80\x72\xed\xf8\x4a\x26\x20\x58\x1c\x5a\x2b\xf9\xfd\x61\x9d\x89\x15\x0e\x52\x96\xa3\xee\xeb\x03\x24\x1e\xec\xc0\x68\xaa\x5f\x23\xce\xfc\x1d\x13\x94\xd4\x58\xc7\x7f\xb4\x69\xe1\x46\xc3\x00\x7f\xd4\xb5\x9e\x5e\xf1\x15\x8f\xc6\xf6\xbd\x3d\xf1\xc2\x41\x4a\xbe\x4c\x18\x94\x67\x5a\xb5\x76\x54\x85\xfe\xed\x13\x89\x4c\x08\xdd\x60\xbb\x45\xba\x82\xec\x03\x9e\xb1\xdb\x6d\x98\xbd\x11\x00\x55\x9d\x45\x32\x7a\xd5\xd2\x0b\xc8\x04\xf7\x36\x58\x6d\x42\xe6\x3b\xfc\x76\x47\x6d\x50\xa1\xfb\x7e\x9d\xb2\x31\xd1\xb0\xef\xd8\xca\xf2\x63\xd6\xb8\xc3\x56\x4a\x6c\xe7\xd3\x4c\x77\xfb\x88\x2c\xcb\x76\xbb\x5d\x22\x1a\x2d\x84\x37\xea\x48\xfb\x4a\x79\x7a\x58\xe3\xbc\x10\x48\x9f\xf0\x01\x16\xf0\xcd\x3f\xe6\x8f\xfb\xc7\xf6\x9b\xb8\x08\x31\x1c\xdb\x22\x7d\x12\xbe\xd3\x4d\x10\x7c\xea\xf6\xdf\x12\xf4\x68\x6a\x3b\xa5\xdc\xa9\xea\x98\x89\x39\x8e\x22\xcb\x9b\x9e\xa8\xa2\x7c\x1e\xf8\x3c\x3d\x33\xc2\x45\x94\xda\x14\xe9\xc3\x8d\x06\x92\xf4\x3c\x1c\xdb\x97\xe7\x4b\xb2\x8e\xa4\xb3\x77\x3d\xf0\xd6\x9e\xf5\x16\xe9\x79\x46\xb8\xe4\xe9\xb9\xd4\xe6\x22\x26\xc7\x96\x85\x17\xa4\xcb\x67\x22\x44\xa7\xfc\x9e\x7d\x08\x45\xa3\x7a\x4f\x22\x7a\x32\x0b\x7d\x65\x14\xc8\x81\x0f\x2e\x98\x89\x00\x66\xaf\x26\xff\x20\x2d\xff\xbe\x40\x5e\x92\x99\x5e\xdc\x9c\x2f\xc7\xbd\xda\x1a\x4a\xd8\xa4\x53\xa7\x7b\x5a\xd2\x6d\x03\x7e\x8d\xe9\xd6\x56\x00\x51\x5e\xfa\x04\xcd\x41\xcb\x12\x1f\x98\x53\x5a\x0b\x60\x81\xfb\x93\x07\xdc\xa5\x18\x58\xa9\x8d\x72\x6f\x59\x96\x25\x71\x25\x6e\xc7\xaf\x9b\xb2\xe0\x46\x8a\xa3\x29\x09\xfe\xda\x6c\xf8\x80\x5c\xdf\x8d\x1d\xf9\xb0\xe7\xc6\x16\xe9\xef\x13\x9c\x23\x75\xbc\xbd\xf8\xe5\xfe\x41\x9c\x92\x57\x95\x60\x79\xd7\xda\x5e\x6f\xa3\x28\x90\x44\x67\x13\x7c\xfd\x8a\x2f\x90\x74\xb3\xff\xe7\x56\xff\x7d\x53\x04\x63\x03\x1a\x3b\x9a\x7a\x33\x89\xd2\xa6\x9d\x55\x4e\x1a\xb9\x9b\x9f\xf8\x8a\xa5\xc3\x92\x1b\xf3\x39\x13\xc9\xe5\xe7\x59\xac\x54\x02\xb9\xd4\xee\xff\xd1\x22\xbd\xe2\x89\xff\x02\x00\x00\xff\xff\x44\x49\x7d\xa4\xb5\x04\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 1205, mode: os.FileMode(493), modTime: time.Unix(1601035719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
