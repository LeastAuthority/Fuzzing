// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// bindata/docker/go-fuzz.dockerfile
// bindata/docker/go-fuzz.sh
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xeb\x30\x10\x85\xf7\x7a\x8a\x03\x77\x2d\x1b\xc3\x0d\x85\x40\x37\x4d\xda\x12\xda\xc4\xc5\x10\x4a\x97\xb2\xf5\x8b\x65\x8d\x88\xa4\x94\xe6\xe9\x8b\x4d\x03\xe9\xae\x2b\x89\x99\x39\x1f\xdf\x79\xea\xda\x3d\x0c\x79\x11\xcc\xba\xa9\x9a\xff\x5c\xf8\xe8\x82\x62\xec\x1f\x76\x21\x65\xe1\x3d\xa4\x8a\x09\x22\x48\x94\xa4\x74\xf1\xc8\xd6\x05\x93\x58\x77\x3c\x40\xc4\x11\x42\x4a\xf4\xc5\x79\xc9\x7b\x91\x14\xe2\x68\x06\x0a\xda\x19\xf4\x22\x59\x9c\xdd\x04\xe3\xf2\x2d\xcf\x10\xd7\xe5\x72\x59\x00\xcf\x6d\xd3\x34\xfb\x76\x7b\x7c\x7d\xbc\x27\xad\x61\x08\x46\x65\xf0\x32\x87\x6c\xe9\xab\x81\xa6\x5a\x9e\xbf\xca\x48\xe7\xfa\x27\x78\x7d\xff\x70\xc2\x17\x31\xf6\xde\x76\x2f\xdb\x5d\x87\x3a\x4f\xb1\x9e\xe7\x2e\x98\xd9\xe8\xf0\xb0\x86\xa6\xd3\x5c\x0c\x9f\x2e\x5b\x48\x1a\x46\x75\xe2\x03\x4d\x91\x92\x62\x9b\xf6\xed\x03\xd5\x15\x56\x25\x8b\x9b\xff\xe2\x3f\xd8\x89\x24\xee\x56\xab\x5f\x1b\xb6\xd9\x6f\x97\xfa\xec\x3b\x00\x00\xff\xff\x7b\x8f\x6d\x78\x5f\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 351, mode: os.FileMode(420), modTime: time.Unix(1601288092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\x4d\x93\xe2\x36\x10\xbd\xeb\x57\xbc\x35\xae\x1d\xc8\x22\x3b\xcc\x71\x26\x6c\x25\xa9\x24\xd7\xbd\xe4\xc6\x52\x20\xdb\xb2\xad\xb2\x46\x72\x49\x72\xa6\x66\x80\xff\x9e\x6a\xd9\x86\x1d\xf6\x84\xd5\xf4\xc7\x7b\xfd\x5e\x2f\x3e\x21\x1f\xbc\xcb\x0b\x65\x72\x69\xfe\x43\x21\x7c\xcb\xbc\x0c\xe0\x92\xb1\x05\xfe\xfd\xf6\xd7\xb7\x27\x38\xd9\x6b\x51\x4a\x84\x56\x79\xf8\x56\x6a\x0d\x5f\x3a\xd5\x07\xb6\x40\xba\x01\x47\x3d\xbc\xbf\x4b\x87\x5e\x94\x9d\x68\x24\x45\x1f\xc1\x61\xc4\x8b\x84\xad\x11\x5a\x39\x67\xd4\x83\x29\x83\xb2\x06\xcb\x57\xa5\x35\x0a\x89\xc1\xcb\x0a\xb5\x75\x31\xeb\xf8\x6a\x5d\x57\x29\x77\x84\x70\xcd\xf0\x22\x4d\x40\xb0\x38\x36\x96\x53\xfd\x71\x95\xb1\x05\x8e\x9c\x17\x83\xd2\xd5\x11\x1c\x4b\xdb\x53\x37\xa1\x57\x88\x31\x7f\x87\x04\x85\xac\xad\xa3\x1f\x65\x1a\xb8\xc1\x50\x83\x3f\xaa\x4a\x8d\x55\x34\xc5\xa3\xb6\x5a\xdb\x57\x4a\x38\x72\x4e\x93\x25\x7a\xe1\x09\x56\xa5\x9c\x2c\x83\x7e\xfb\x00\x22\x63\x4c\xd5\xd8\xed\x90\x2e\xc0\x75\xc0\x23\xf6\xfb\x67\x42\x6f\x18\x20\xcb\xd6\x22\x19\xbc\x68\xe4\x13\xa4\x09\xee\xad\xb7\xca\x84\xcc\xb7\xf8\xed\x0e\x5a\x2f\x42\xfb\xf5\x1a\xa5\xc5\xc4\x85\x7d\xc5\x8e\x17\xe7\x89\xe3\x1e\x3b\xce\xb1\x9b\x46\x13\xdc\xdd\x1a\x59\x96\xed\xf7\xfb\x84\xd5\x8a\x31\x6f\x44\x27\x0f\xa5\xf0\x72\xb9\xc2\x69\x06\x90\x6e\x70\x06\x11\x78\xf0\xeb\x7c\x7d\x58\x37\x0f\xec\xc2\x58\xdf\x35\xdb\x74\xc3\x7c\xab\xea\xc0\x68\xd4\xed\x35\x0b\x1d\x05\x6e\x45\xd9\xa1\x70\x52\x74\x1e\x7e\xe8\x7b\xeb\x42\x14\xa8\xd1\xb6\x10\x1a\x9c\x97\xd6\xd4\xaa\x41\xad\x45\xc3\x26\xc1\xb6\xe9\xb2\x14\x01\x59\xad\xa5\x2c\x65\xf6\x26\x5e\x34\xce\x8d\x93\x3d\xc6\x08\xaf\x94\x3b\x13\x22\xfe\x37\x81\xca\xbe\x3c\x7d\xf7\xcb\xec\xcb\x6a\xfd\x7d\xb3\x7e\x58\xe5\x53\x17\x9f\xa7\x27\x02\x76\x61\x85\x32\xdb\x74\x79\x63\x87\x24\x3d\xf5\x5d\xf3\xf4\x78\x49\x56\x71\x17\xd9\xbb\xea\x27\x1d\xfa\xae\xc1\x76\x8b\x24\x4b\x70\x3e\xdf\x5e\x79\xf2\xa3\x30\xd4\x30\xc9\xf2\xca\x86\x6b\xf9\xb8\xc1\x42\x99\x03\x49\xb1\x4d\x4f\x13\x8a\x4b\x9e\x9e\x0a\x65\x2e\x8c\xb5\xc2\x1f\x48\x87\xb0\xad\x85\xf6\x92\x45\x4d\xa6\x45\xbf\x50\x2a\x78\x4f\xc8\xe6\xc2\x84\x01\x93\x56\xa3\x7e\xe0\x96\xfe\x9f\x67\x5c\x92\x89\x47\xcc\x1c\xbd\x32\xe6\x55\xd6\xc8\x84\x44\x7a\x6d\x95\x96\xb3\xbb\x9a\x80\x5f\x23\x89\xca\x32\x20\xee\x21\xdd\x40\x11\x1f\x5e\xe0\x8c\xc9\x25\x2b\x06\xcc\xed\xfe\xa4\x00\x79\x39\x1a\xa6\x50\x46\xb8\xb7\x2c\xcb\x92\x98\x12\xb3\xe3\xd7\x8d\x59\x70\x83\x8c\xa1\xd1\x09\xf4\xf5\xfc\x4c\x03\xf8\xea\x2e\xec\xa4\x0f\x07\xba\x98\x6d\xfa\xfb\xd8\x8e\x3c\x72\xab\xf8\xe5\xbe\x20\x46\xa5\x17\x25\x23\x7a\xd7\xb3\xb9\xce\x8e\x3a\xc5\xcd\x26\xf8\xfc\x19\x9f\xc0\x25\xd2\x79\x57\x3f\x5f\xd5\x3f\x37\x46\x30\x96\x3c\x39\x98\xea\x79\x24\xa5\x4c\x33\xb1\x1c\x39\x92\xb2\x1f\xf0\xb2\xf9\x86\x78\x74\xc2\x07\x4d\x38\x1d\x1f\xc5\xa2\xf7\x12\xf0\xd9\xd4\x3f\x4a\x8b\xf4\xda\x8f\xfd\x1f\x00\x00\xff\xff\xf4\x6a\x59\x5c\x35\x05\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 1333, mode: os.FileMode(493), modTime: time.Unix(1601641128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
