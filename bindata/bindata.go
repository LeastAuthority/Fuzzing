// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// bindata/docker/go-fuzz.dockerfile
// bindata/docker/go-fuzz.sh
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xeb\x30\x10\x85\xf7\x7a\x8a\x03\x77\x2d\x1b\xc3\x0d\x85\x40\x37\x4d\xda\x12\xda\xc4\xc5\x10\x4a\x97\xb2\xf5\x8b\x65\x8d\x88\xa4\x94\xe6\xe9\x8b\x4d\x03\xe9\xae\x2b\x89\x99\x39\x1f\xdf\x79\xea\xda\x3d\x0c\x79\x11\xcc\xba\xa9\x9a\xff\x5c\xf8\xe8\x82\x62\xec\x1f\x76\x21\x65\xe1\x3d\xa4\x8a\x09\x22\x48\x94\xa4\x74\xf1\xc8\xd6\x05\x93\x58\x77\x3c\x40\xc4\x11\x42\x4a\xf4\xc5\x79\xc9\x7b\x91\x14\xe2\x68\x06\x0a\xda\x19\xf4\x22\x59\x9c\xdd\x04\xe3\xf2\x2d\xcf\x10\xd7\xe5\x72\x59\x00\xcf\x6d\xd3\x34\xfb\x76\x7b\x7c\x7d\xbc\x27\xad\x61\x08\x46\x65\xf0\x32\x87\x6c\xe9\xab\x81\xa6\x5a\x9e\xbf\xca\x48\xe7\xfa\x27\x78\x7d\xff\x70\xc2\x17\x31\xf6\xde\x76\x2f\xdb\x5d\x87\x3a\x4f\xb1\x9e\xe7\x2e\x98\xd9\xe8\xf0\xb0\x86\xa6\xd3\x5c\x0c\x9f\x2e\x5b\x48\x1a\x46\x75\xe2\x03\x4d\x91\x92\x62\x9b\xf6\xed\x03\xd5\x15\x56\x25\x8b\x9b\xff\xe2\x3f\xd8\x89\x24\xee\x56\xab\x5f\x1b\xb6\xd9\x6f\x97\xfa\xec\x3b\x00\x00\xff\xff\x7b\x8f\x6d\x78\x5f\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 351, mode: os.FileMode(420), modTime: time.Unix(1601288092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\xcd\x72\xea\x36\x14\xde\xeb\x29\xbe\x6b\x3c\x37\xd0\x8b\x4c\xc9\x32\x29\x77\xda\x4e\xdb\xed\xdd\x74\x47\x18\x90\xed\x63\x5b\x83\x22\x79\x24\xb9\x99\x04\x78\xf7\xce\x11\x76\x68\xd2\x15\xe6\xf8\xfc\x7c\x7f\x9e\x7d\xc1\x6a\x08\x7e\x55\x6a\xbb\x22\xfb\x0f\x4a\x15\x3a\x11\x28\x42\x92\x10\x33\xfc\xfd\xe3\x8f\x1f\x0f\xf0\xd4\x1b\x55\x11\x62\xa7\x03\x42\x47\xc6\x20\x54\x5e\xf7\x51\xcc\x90\xaf\x21\xd1\x0c\x6f\x6f\xe4\xd1\xab\xea\xa8\x5a\xe2\xea\x3d\x24\xac\x7a\x26\xb8\x06\xb1\xa3\xa9\xa3\x19\x6c\x15\xb5\xb3\x98\xbf\x68\x63\x50\x12\x86\x40\x35\x1a\xe7\x53\xd7\xe1\xc5\xf9\x63\xad\xfd\x01\xca\xb7\xc3\x33\xd9\x88\xe8\x70\x68\x9d\xe4\xf9\xc3\xa2\x10\x33\x1c\xa4\x2c\x07\x6d\xea\x03\x24\xe6\xae\xe7\x6d\xca\x2c\x90\x6a\xe1\x13\x12\x94\xd4\x38\xcf\x3f\xda\xb6\xf0\x83\xe5\x05\xbf\xd5\xb5\xbe\x4e\xf1\x95\x80\xc6\x19\xe3\x5e\xb8\xe1\x20\x25\x5f\x26\xf4\x2a\x30\xac\x5a\x7b\xaa\xa2\x79\xfd\x00\xa2\x10\x42\x37\xd8\x6e\x91\xcf\x20\x4d\xc4\x3d\x76\xbb\x47\x46\x6f\x05\x40\x55\xe7\x90\x0d\x41\xb5\xf4\x00\xb2\xd1\xbf\xf6\x4e\xdb\x58\x84\x0e\xbf\x7c\x82\xd6\xab\xd8\x7d\x7f\xaf\xb2\x30\x49\xb0\xef\xd8\xca\xf2\x3c\x72\xdc\x61\x2b\x25\xb6\xe3\x69\x86\xbb\x5d\xa2\x28\x8a\xdd\x6e\x97\x89\x46\x0b\x11\xac\x3a\xd2\xbe\x52\x81\xe6\x0b\x9c\x26\x00\xf9\x1a\x67\x30\x81\xbb\xb0\x5c\x2d\xf7\xcb\xf6\x4e\x5c\x84\xe8\x8f\xed\x26\x5f\x8b\xd0\xe9\x26\x0a\x3e\x75\xfb\x37\x19\x9d\x0c\xee\x54\x75\x44\xe9\x49\x1d\x03\xc2\xd0\xf7\xce\xc7\x64\x50\x6b\x5c\xa9\x0c\xa4\xac\x9c\x6d\x74\x8b\xc6\xa8\x56\x8c\x86\x6d\xf2\x79\xa5\x22\x8a\xc6\x10\x55\x54\xbc\xaa\x67\x83\x73\xeb\xa9\xc7\xb5\x22\x6b\xed\xcf\x8c\x48\xfe\xc9\xa0\x8a\x6f\x0f\x4f\x61\x5e\x7c\x5b\x2c\x9f\xd6\xcb\xbb\xc5\x6a\xdc\x12\x56\xf9\x89\x81\x5d\x44\xa9\xed\x26\x9f\xdf\xd8\x21\xcb\x4f\xfd\xb1\x7d\xb8\xbf\x64\x8b\xa4\x45\xf1\xa6\x7b\xee\xda\xb3\x8c\x9b\xfc\x34\x6e\xb8\xac\xf2\x53\xa9\xed\x45\x88\x4e\x85\x3d\x6b\x18\x37\x8d\x32\x81\x44\xd2\x73\x14\xe9\x99\x5b\x21\x7b\xde\x3a\x0d\x66\x02\x18\x75\xbe\x6a\x0f\xe9\xf8\xfd\x74\xe3\x92\x8d\x18\x52\xe7\xd5\xe7\x6b\x5f\xed\x2c\x65\x2c\xf0\x4b\xa7\x0d\x4d\xc9\x68\x23\x7e\x4e\xc9\xa8\x9d\x00\x12\x87\x7c\x0d\xcd\x21\x91\x25\xce\x18\x1d\x5e\x08\x60\x5a\xf7\x3b\x17\x38\x87\xc9\xec\x52\x5b\xe5\x5f\x8b\xa2\xc8\x52\x4b\xea\x4e\x4f\x37\x66\xd1\x0f\x94\x4a\x57\x17\xf9\xe9\xf1\x91\x0f\xc8\xc5\xa7\xb2\xa7\x10\xf7\x9c\xf6\x4d\xfe\xeb\x75\x1d\xfb\x7b\x9b\xf8\xe9\xf3\x40\xaa\x52\x50\x95\x60\x7a\xef\x91\x7f\xbf\x8d\xcd\x06\x59\x52\x36\xc3\xd7\xaf\xf8\x02\x49\xc8\x27\xad\xfe\xff\x45\xfc\x75\x63\x04\xeb\x38\x4f\x83\xad\x1f\xaf\xa4\xb4\x6d\x47\x96\x57\x8e\x9c\xeb\x0f\x78\xc5\x94\x7f\xc9\xb1\xf8\xe8\x89\xe4\x0f\x87\x6b\x29\x37\x19\xe4\x14\xc8\xff\x5a\x8b\xfc\x7d\x9f\xf8\x37\x00\x00\xff\xff\x7e\xc6\x80\x91\xf1\x04\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 1265, mode: os.FileMode(493), modTime: time.Unix(1601288092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
