// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// bindata/docker/go-fuzz.dockerfile
// bindata/docker/go-fuzz.sh
// bindata/fuzzing/common.go
// bindata/fuzzing/utils.go
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\x81\xef\xac\x18\xc3\x17\x0a\x81\x5e\x9a\xb4\x25\xb4\x89\x8b\x21\x94\x1e\x65\xeb\x2f\x96\xb5\x22\x92\x5c\x9a\xa7\x2f\x36\x0d\x6d\x6f\x3d\xed\xb2\x3b\x33\xfc\xe6\xa1\x6d\x0e\x30\xe4\x45\x30\x9b\x7a\x55\xff\xe7\xc2\x47\x17\x14\x63\xff\xb0\x0f\x29\x0b\xef\x21\x55\x4c\x10\x41\xa2\x24\xa5\x8b\x47\xb6\x2e\x98\xc4\xda\xd3\x11\x22\x0e\x10\x52\xa2\x2b\xce\x4b\xde\x89\xa4\x10\x07\xd3\x53\xd0\xce\xa0\x13\xc9\x62\x72\x23\x8c\xcb\x3f\xf3\x0c\x71\x5d\x2e\x97\x25\xe0\xb1\xa9\xeb\xfa\xd0\xec\x4e\xcf\xf7\xb7\xa4\x35\x0c\xc1\xa8\x0c\x5e\x66\x93\x2d\xdd\xaa\xa7\xb1\x92\xd3\x47\x19\x68\xaa\xbe\x8c\xd7\xf9\x07\x09\x5f\xc0\xd8\x6b\xd3\x3e\xed\xf6\x2d\xaa\x3c\xc6\x6a\xbe\xbb\x60\x66\xa2\xe3\xdd\x06\x9a\xce\x73\x31\xbc\xbb\x6c\x21\xa9\x1f\xd4\x99\xf7\x34\x46\x4a\x8a\x6d\x9b\x97\xb7\x2b\xee\x2a\x59\x54\xdf\xfb\x42\xdf\xdb\x91\x24\x6e\xd6\xeb\x5f\x1f\xb6\x3d\xec\x96\xf2\xec\x33\x00\x00\xff\xff\xd9\x0f\xd1\xce\x5d\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 349, mode: os.FileMode(420), modTime: time.Unix(1601022060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x6e\xea\x46\x14\xde\xcf\x53\x7c\x31\x56\x02\x15\x63\x97\x2c\x43\x1d\xb5\x55\xd5\x6d\x36\xdd\x21\x04\x63\xfb\xd8\x1e\xe1\xcc\x58\x33\xe3\xa2\x84\xf0\xee\x57\xc7\xd8\x70\xc3\x5d\x31\x1c\x9f\x9f\xef\x6f\xf6\x80\xb4\xf7\x2e\xcd\xb5\x49\xc9\xfc\x8f\x5c\xf9\x46\x78\x0a\x90\x24\xc4\x0c\xff\xbd\xfd\xf3\xf6\x02\x47\x5d\xab\x0a\x42\x68\xb4\x87\x6f\xa8\x6d\xe1\x0b\xa7\xbb\x20\x66\x88\x57\x90\xa8\xfa\xcf\x4f\x72\xe8\x54\x71\x50\x35\x71\xf5\x19\x12\x46\xbd\x13\x6c\x85\xd0\xd0\xd4\x51\xf5\xa6\x08\xda\x1a\xcc\x8f\xba\x6d\x91\x13\x7a\x4f\x25\x2a\xeb\x86\xae\xfd\xd1\xba\x43\xa9\xdd\x1e\xca\xd5\xfd\x3b\x99\x80\x60\xb1\xaf\xad\xe4\xf9\xfd\x22\x11\x33\xec\xa5\xcc\x7b\xdd\x96\x7b\x48\xcc\x6d\xc7\xdb\x54\xbb\xc0\x50\xf3\x77\x48\x90\x53\x65\x1d\xff\x68\x53\xc3\xf5\x86\x17\xfc\x55\x96\xfa\x32\xc5\x57\x3c\x2a\xdb\xb6\xf6\xc8\x0d\x7b\x29\xf9\x32\xa1\x53\x9e\x61\x95\xda\x51\x11\xda\x8f\x6f\x20\x12\x21\x74\x85\xcd\x06\xf1\x0c\xb2\x0d\x78\xc6\x76\xbb\x66\xf4\x46\x00\x54\x34\x16\x51\xef\x55\x4d\x2f\x20\x13\xdc\x47\x67\xb5\x09\x89\x6f\xf0\xc7\x1d\xb4\x4e\x85\xe6\xf5\x5a\x65\x61\x06\xc1\x5e\xb1\x91\xf9\xd7\xc8\x71\x8b\x8d\x94\xd8\x8c\xa7\x19\xee\x66\x89\x24\x49\xb6\xdb\x6d\x24\x2a\x2d\x84\x37\xea\x40\xbb\x42\x79\x9a\x2f\x70\x9a\x00\xc4\x2b\x7c\x81\x09\x3c\xf9\x65\xba\xdc\x2d\xeb\x27\x71\x16\xa2\x3b\xd4\x59\xbc\x12\xbe\xd1\x55\x10\x7c\xea\xf6\x6f\x32\xba\x37\xa5\xbd\xb8\xdc\xa8\xe2\x90\x88\xd1\x8e\x2c\x49\xab\x96\xa8\xa0\x74\x2c\xf8\x34\x3e\xf1\x86\xb3\xc8\xb5\xc9\xe2\xf9\x0d\x06\xa2\xf8\xd4\x1d\xea\x97\xe7\x73\xb4\x18\x40\x27\x9f\xba\xe3\xae\x1d\xf3\xcd\xe2\xd3\xb8\xe1\x9c\xc6\xa7\x5c\x9b\xb3\x10\x8d\xf2\x3b\x26\x1b\xb2\x4a\xb5\x9e\xc4\x40\x7c\x64\xf3\xce\xad\x90\x1d\x6f\x9d\x06\x23\x01\x8c\x82\x5c\x44\x82\xb4\xfc\x7d\xba\x71\x8e\x46\x0c\xe7\x88\x59\x1f\x1b\xdd\xd2\x64\x57\x1d\xf0\xfb\x60\x57\x69\x05\x30\xe0\x8d\x57\xd0\xec\x9c\xcc\xf1\x85\x51\xf6\x85\x00\x26\x2f\xff\xe6\x02\x87\x63\x70\x20\xd7\x46\xb9\x8f\x24\x49\xa2\xa1\x65\xe8\x1e\x5e\x37\x16\xc1\xf5\x34\x94\x2e\xd2\xf2\x6b\xbd\xe6\x03\x72\x71\x57\x76\xe4\xc3\x8e\x23\x98\xc5\x7f\x5e\xd6\x39\x52\x87\xdb\xc4\x6f\xf7\x03\x43\x95\xbc\x2a\x44\x69\x0d\x5d\x73\x78\xbd\x8d\x2c\x43\x34\xa8\x18\xe1\xf1\x11\x0f\x90\x84\x78\xd2\xe5\xd7\x98\xfe\x7b\x63\x04\x63\x03\x2a\xdb\x9b\x72\x7d\x21\xa5\x4d\x3d\xb2\xbc\x70\xe4\xb0\x7d\xc3\x2b\xa6\x50\x4a\x8e\xc0\x77\xfd\x25\xa7\x99\x6b\x43\x46\x22\xc8\x29\x47\x3f\xdb\x88\xf8\xba\x4f\xfc\x08\x00\x00\xff\xff\x6f\xa6\xc8\xcb\x86\x04\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 1158, mode: os.FileMode(493), modTime: time.Unix(1600702909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fuzzingCommonGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5f\x73\xdb\xb8\x11\x7f\x26\x3e\xc5\x1e\x67\xd2\x90\x17\x99\x6a\x5e\xd5\xea\xa5\xc9\xf9\xc6\x9d\xc6\xf1\xdc\x65\xe6\x1e\xe2\xcc\x1d\x44\x2e\x25\x8c\x29\x40\x07\x80\xf6\xd9\x3e\x7f\xf7\xce\x2e\x00\x92\xa2\x94\xa6\xd3\xea\xc1\x43\x82\x8b\xfd\xf3\xc3\xee\x6f\x17\x5e\x2e\xdf\x6c\x7a\xd5\x35\xb0\x35\x6d\xff\xf4\x24\xc4\x41\xd6\x77\x72\x8b\x40\x6f\x4a\x6f\x85\x50\xfb\x83\xb1\x1e\x0a\x91\xe5\xed\xde\xe7\x22\xcb\x95\x59\x2a\xd3\x7b\xd5\xd1\x8b\x71\xf4\xf7\x20\xfd\x6e\xd9\xaa\x0e\xe9\x81\x16\x2c\xb6\x1d\xd6\x2c\x6e\x7b\xed\xd5\x1e\x97\x0d\x6e\xfa\x2d\x2d\x78\x74\x5e\xe9\x6d\x2e\x44\x96\x6f\x95\xdf\xf5\x9b\xaa\x36\xfb\xa5\xf3\x16\x7d\xbd\xb3\x4b\xfe\xde\x3e\x2e\x2d\xfe\xde\x2b\x8b\xb9\x28\x85\x58\x2e\xe1\xb2\x7f\x7a\x82\xda\x68\xe7\xa5\xf6\x0e\x5a\x63\x61\x6b\x2e\xc8\x4f\xf0\x06\x7a\x87\xf0\xb0\x43\x0d\x16\x7d\x6f\xb5\xd2\x5b\x68\xad\xd9\x83\xdf\x61\xd8\xd9\xf6\xba\x16\xf7\xd2\x52\x24\xb4\x70\xa5\x3d\xda\xe0\x09\xac\xe1\x6d\x58\xbc\x36\x76\x2f\x3b\xe0\xdf\x1a\xfe\x1a\x16\xdf\x2b\x57\x4b\xdb\xc4\xc5\x8b\xb7\xd1\x9f\x77\x56\xba\x1d\x5a\xb0\x78\xb0\xe8\x90\x7c\x92\x83\x47\x79\x1d\xbe\xe6\x50\x48\x0d\x4a\x1f\x7a\x0f\x7e\x27\x3d\x84\xf5\x86\xfd\xb2\xe8\x0e\x58\x7b\x75\x8f\x62\xb9\xcc\xda\xe4\xa5\x57\x46\x97\x0b\x50\xde\x41\x6d\x2c\x09\x19\xdd\x90\x9b\xa6\xf7\xa4\xa7\x38\x48\xad\x6a\xd8\xa3\x73\x72\x8b\xe5\x02\xa4\x6e\x40\xcb\x3d\x42\x11\x0c\xed\xa4\xdb\x95\x95\xf0\x8f\x07\x1c\xbc\x74\xde\xf6\xb5\x87\x67\x91\x5d\x93\x24\xfd\x9c\xb7\x74\xc2\xd9\x15\x6f\x02\x80\xcf\x5f\x36\x8f\x1e\x45\xf6\x31\xd8\x19\x25\x08\x85\xcb\x5e\xd7\x90\x1e\xc4\xcb\x14\x82\x2b\x8f\x56\x7a\x63\x41\x39\xa0\x68\xd3\xeb\xf4\x88\x12\x20\x2e\x87\xce\xd4\xd2\x63\x03\x4a\x13\x0a\x14\xfa\x08\x04\x1c\xa1\xf0\xda\xc1\x83\xb1\x77\x14\x7b\xa3\x2c\xd6\xde\xd8\xc7\xe3\xb8\x06\xd3\x63\x7c\x0a\x86\x9f\xd2\x5e\x64\x4a\xb7\xc6\x85\xf7\xcf\x5f\x8c\xab\x2e\x55\x87\x57\xba\x35\x82\x11\xe7\xb0\x60\x0c\x2c\x8b\x7e\xbe\x57\x36\x85\xff\x22\x82\xc9\x01\x05\x72\xaf\x08\x60\x95\x6c\x83\x3f\xff\x84\xb5\xb9\x47\xfb\x4e\x76\xdd\x46\xd6\x77\x41\x8a\x8f\xea\x83\xdb\x46\x5d\x21\x73\xae\xf1\x61\xe6\xfe\xa5\xb1\x31\x71\x4f\x11\x4c\xc0\x85\xfc\xe9\xe4\x93\xea\x1e\xa1\x33\xb2\x71\x99\xdf\xa1\xb2\x21\xbb\x1c\x67\x41\xc8\x10\x57\x09\x32\x7e\xc6\x4e\xd1\xce\x4f\xb2\x84\xe2\xfb\x99\xd0\x02\xd0\x5a\x63\x4b\x02\x93\xd3\x6a\xb5\x86\x1f\xd1\x93\x34\xe5\xce\xa0\xa3\x14\x19\x9d\x4e\xa3\x6c\x94\xf8\x25\xbc\x15\xb4\xa9\x3c\x42\x32\x7c\x7f\x37\x2c\xcc\x44\xe8\x38\x1c\x9b\x25\xc9\x40\x2e\xd5\x4f\x28\x1b\x12\x1d\xd5\x94\x22\x53\x2d\x4b\x7d\xb7\x06\xad\x3a\x72\x30\x0b\xb0\xd1\x2b\x2b\x10\xd9\x8b\x48\x6b\x7f\x99\x05\x46\xe2\x9c\x0d\xab\x90\x0e\x47\xd6\x45\x36\x71\x78\x05\x89\xcc\xaa\x7f\x1a\xa5\x8b\x18\xe7\x62\x92\xc6\x25\xed\x48\x50\x90\xc2\xf4\xbc\x10\xd9\xcb\x82\xfc\x89\x45\xf2\xa1\x77\xfe\xf4\x24\xbe\x7d\xdc\x9b\xde\x03\xa7\x8f\x03\xd5\x92\x18\x9f\x0a\x98\xba\xee\x6d\x3a\xe1\xf3\xba\xcf\x9d\xf2\xfc\x90\xb9\x52\x3c\xda\x01\xf5\xff\xa0\xe6\x2c\xee\xec\x5a\x81\x96\x4e\x65\x84\x9c\x54\xc6\xb8\x63\x3d\x10\x29\x28\xed\x51\x37\xc4\x7a\x06\x36\x08\x0d\xb6\x68\x2d\x36\x15\x5c\x79\xa8\x65\xd7\xb9\x48\x87\x61\x43\x9d\x2a\xe8\x41\xf9\x5d\xa2\x88\x50\x3f\x23\xd9\x4a\xe2\x07\x30\xed\x74\x27\x36\x70\x2f\xbb\x1e\x23\xb3\x00\xde\xa3\xf6\x24\x23\x03\x90\x11\xb4\x94\x51\x03\x26\x65\xf2\xb5\x88\x8a\xde\x6d\xe6\xd5\xcc\xc5\xa0\x5a\x60\xa8\xa2\x54\x51\xfe\x0d\x66\xa9\x18\x77\x17\xed\xde\x57\x3f\x1f\xac\xd2\xbe\x2d\xf2\x57\xee\x56\xbf\x72\xf9\x02\xec\x22\xd2\x40\xc1\xbd\xb0\xfa\xd9\xcb\xfa\xae\x28\xcb\x92\x21\x0c\xa8\x7d\x42\x37\xc5\x64\xc8\x86\x23\x5e\xe4\xde\x10\xb8\x9e\xaa\x3e\xda\x75\xa1\xe3\x85\x9c\x21\xcc\x12\x7e\x70\x90\xce\x61\x73\x02\xf0\xd7\xf1\x20\x2f\xbe\x01\x06\x1f\x62\xf2\xaf\x3a\x01\x70\x2c\xee\x2a\x25\x61\xb2\x53\x71\xc3\x29\x63\xc0\xd7\xf8\x87\x87\x2d\xfa\x10\xaf\xa6\xb7\xe4\x0f\xc5\xa6\x74\x6d\x71\xcf\xdd\x95\xbe\xa7\x52\x49\xae\xd3\xfb\x49\x6e\x97\xac\xb4\x28\xa1\x60\x75\xe9\xf3\x02\x1a\xa3\x11\x36\xc6\x04\xaa\x98\xd0\x1c\xf9\xf1\x8f\x15\x6b\xaf\x42\xbf\xa8\x8d\xf6\x52\xe9\x08\xf3\x22\x32\x6b\xe8\xb5\xbf\xf7\x26\xf4\x2f\x3a\x00\x22\x0a\x57\x91\x8a\xec\x17\x84\x07\xa9\x3d\x65\xb9\xbb\x53\x07\xd0\x46\x5f\x1c\x0b\x51\x81\x7f\xc7\x5e\x24\x2e\x62\xc2\x1b\xcc\x7e\x0e\x8f\x5f\x44\x36\x30\x2f\xad\x57\xcc\xbb\x25\x6d\x69\xc3\xc2\x95\x23\x6a\x2c\xe1\xcf\x3f\x47\xa6\xfa\xe1\x0f\x1f\x78\x95\x72\x32\xcf\xd9\x44\x16\x14\xbe\x79\x43\xcf\x6c\x38\x99\x83\xf5\x1a\x3a\xd4\xc5\x68\xbc\xbc\x78\x4b\x52\x14\xb9\xd2\x3d\x8a\x2c\x7b\x11\xec\x25\x07\x7e\x4a\xce\xd4\x48\x8b\x63\x9e\x64\x65\x23\x8d\x2e\x78\x2c\x29\xa3\xe3\x33\x02\x39\x62\x6e\x72\x2d\xf2\x77\xb0\x9a\xf0\xfe\x3f\xcc\xc2\x1b\xc8\xab\xa0\x27\xff\x5f\x5c\xe0\xe4\x59\x0f\x5d\x84\x37\xd0\x41\x84\xee\x41\x26\xa8\x05\x84\xf1\x69\x15\xc6\x0d\x72\x99\xd6\xc2\x04\xb5\x1a\x46\xa8\x22\xb8\xc1\x3d\x63\x98\xa6\x62\xbe\x4d\xfa\x46\x04\x7c\x3c\xb2\xff\xea\xc4\x36\x16\xe5\xdd\x94\x84\xc9\xf1\x14\xcf\xd8\x87\xa8\xa6\x2f\xa5\xea\x94\xde\xfe\x4b\xed\x95\x07\x9a\xb3\x1d\xa0\xac\x77\xa9\xe2\x5e\x0f\xac\xb2\xa5\xdc\xf7\xcc\x33\xb3\xe1\x2c\x8c\xaa\x91\x87\x68\xb4\xef\x40\x79\x70\x88\x0e\x7e\xeb\x48\xef\x6f\xd0\x06\x2b\x71\x30\x99\x56\xea\x49\xa1\xce\x9d\x2a\x3c\x7c\x1f\xef\x07\xd5\xa7\x05\xb0\x42\x6a\x1f\x25\x14\xbf\x4e\x0a\x39\xf5\x45\xed\x17\xe0\x8d\x97\x5d\x90\x79\x1e\x27\x8a\xe9\x2c\xf3\x95\xf6\x76\x84\x7e\x49\xe8\xf1\x7d\xa3\xba\x36\x3f\x10\x31\x14\x21\xfb\x4a\xc1\xf4\xf0\xe9\xe3\xfb\x8f\x2b\x38\x48\x2b\xbb\x0e\x3b\xf5\x84\x22\xa3\xcb\x44\x00\xb9\x51\xcd\x0d\xcf\xe4\xc4\x2d\xe1\x43\xab\xac\xf3\x83\xbf\x73\x86\x9d\xc8\xdc\x1c\x4f\x88\x81\x23\x62\x7c\x7f\x8f\x00\x3c\x8f\xc3\xc9\x24\x4f\x61\x0d\xb3\x68\xab\xc0\x7b\xdc\x8a\xce\xc7\xc2\x55\x30\x10\x50\x4a\x9d\x90\x77\x43\x14\x6b\x68\x65\xe7\x70\x34\x5a\x71\x3f\x38\x3b\xd0\x06\x3d\x93\xad\xde\x32\x75\x90\x9d\x29\x06\x94\xbc\x43\xd9\x65\xc7\x91\xaf\x21\x69\x1d\x3f\x0e\xdb\x52\x8c\xf4\xe9\x85\x5c\x4d\x41\x24\x93\xac\x31\x00\xc6\x35\x43\x42\x9c\x13\xf4\x46\x81\x51\x33\xbe\x89\xbd\x78\xb8\x0e\xf5\xfb\xbd\xb4\x8f\xab\x5b\xbd\x3e\xfe\xdd\x6a\xe2\x8a\xe9\x96\x0b\x6e\x9f\x4a\x6f\x57\xf0\xaa\xb9\xd5\x79\xcc\xb8\x8b\x60\xf2\x44\x38\x26\xff\x20\xfc\x15\x31\xd6\x71\xac\x91\x32\x6d\x8e\xda\x84\xac\x86\xfd\x9d\x2e\x72\x26\xb4\xa9\x46\x6e\xa3\x6c\x8b\xaf\x4b\x11\xb4\x15\x84\xe1\x83\x8d\x4c\x15\x73\x47\x99\x2d\x05\xd2\x3a\x1a\xe7\x8e\xb3\x38\x84\x12\xbd\x25\x56\xe1\xca\x9e\x0d\xfe\x43\x62\xc4\x89\xed\x59\x64\x87\xbb\xed\x8d\xf4\xbb\x30\x3a\xf1\xff\x05\xaa\x4f\x8f\x07\xfc\xd8\x16\xbf\x4a\x5d\xef\x8c\x7d\x7e\x29\xab\x9b\x20\x44\xd9\xbb\x37\x0d\x3d\x0e\xb5\xfb\x23\xfa\x0f\x61\xa9\x88\xaa\xce\x4e\xa4\xb1\x89\x5f\xbd\xde\xc3\xc1\xa2\xf7\x8f\xe0\x7a\x8b\xe0\x77\xca\x81\xdb\x99\xbe\x6b\xf4\x6b\x4f\xf3\xe7\xc1\x38\xa7\x36\x1d\x9e\x4c\xb1\x93\xb8\xa7\xed\x65\xf0\x27\x6f\x3b\xc4\x1a\xf3\x05\xe4\xf1\x46\x40\x63\x5d\xb8\xcb\x4c\xe0\x98\xdd\x73\xce\x20\x72\xd6\xcc\xfc\x06\x75\x74\xdb\x10\x2f\xe2\xdf\x01\x00\x00\xff\xff\x63\x3c\xf7\x7c\xac\x11\x00\x00")

func fuzzingCommonGoBytes() ([]byte, error) {
	return bindataRead(
		_fuzzingCommonGo,
		"fuzzing/common.go",
	)
}

func fuzzingCommonGo() (*asset, error) {
	bytes, err := fuzzingCommonGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fuzzing/common.go", size: 4524, mode: os.FileMode(420), modTime: time.Unix(1600785780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fuzzingUtilsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xc1\x6e\xdb\x38\x10\x86\xcf\xe2\x53\xcc\x0a\xc8\x42\xc2\x3a\x52\x72\x0d\xe0\x3d\x34\x8d\x7b\x69\x52\x03\x05\x7a\x09\x82\x82\x11\x47\x34\x61\x8a\xe3\x52\x64\x9c\xda\xf1\xbb\x17\x43\x49\x8e\x03\x24\x40\x4f\x12\xc9\xe1\x3f\xdf\xcf\x19\xb2\xae\xff\x7b\x8c\xc6\x2a\xd0\xd4\xc6\xdd\x4e\x88\x8d\x6c\xd6\x52\x23\xf0\xc8\x38\x2d\x84\xe9\x36\xe4\x03\x14\x22\xcb\xd1\x7b\xf2\x7d\x2e\xb2\xbc\xed\x02\x7f\x36\x32\xac\xea\xd6\x58\xe4\x1f\x9e\xf0\xd8\x5a\x6c\xd2\x9a\x8f\x2e\x98\x0e\x73\x21\xb2\x5c\x93\x95\x4e\x57\xe4\x75\xfd\x5c\x07\x22\xdb\xd7\x9a\xea\x31\x55\x9f\x8b\x52\x88\xba\x86\x9f\xd2\x35\x2b\xf2\x60\x7a\x90\x10\x7e\x6f\x10\xc2\x4a\x06\xd8\x22\x34\xd2\x41\xec\x11\x02\x81\xc7\x9e\xec\x13\x02\x67\xec\x21\xf6\xc6\x69\xd0\x04\x93\x56\x25\xd2\xc6\x49\xaa\x0f\x3e\x36\x61\x7f\x10\xa2\x8d\xae\x81\x2f\x18\x6e\x49\x2d\x65\x58\x15\x83\x2d\xfe\xe5\x20\xe3\x74\x09\xc5\xf0\x33\x83\xe4\xb3\x84\xbd\xc8\x3a\x52\x08\x57\xf3\x57\xf9\x3b\x44\x75\x27\x3b\x84\x97\xb7\x73\xb7\xa4\xa2\x45\x91\x6d\xd6\xfa\x9a\x5c\x6b\x34\xef\xfa\xf7\x18\x32\xcc\xed\x6f\x49\xe1\x15\xb0\xe8\xe1\x24\xb4\xfa\xc4\x15\x58\x58\xa9\x7b\x98\xc3\xfd\xc3\x80\xb1\xcf\xcf\xcf\x83\xd4\x7d\x3e\x83\x7c\x28\x4e\x3e\x6c\xea\x13\xe0\x1b\xaa\xaf\x24\x55\x71\xd4\x9b\xc1\xab\xb9\x52\x64\xa6\x4d\xf1\xff\xcc\xc1\x19\xcb\xa6\x32\x8f\x21\x7a\x07\x79\x9e\x94\x44\x76\x48\x41\x16\x1d\x6b\xf4\x25\xfc\x0f\x97\xef\xc4\x91\x67\xab\xdb\xa2\xed\x42\xf5\x7d\xe3\x8d\x0b\x6d\x21\xb2\x2c\xcb\x3b\xf2\xa9\x54\x0e\xc8\xe1\x04\x05\x9d\x0c\xcd\x0a\x15\x17\x2a\xa0\x77\x70\xf6\x2b\x9f\x71\xf8\x2b\x1b\x0f\xcb\x92\xd3\x27\x5f\xc9\xd1\x5a\xf7\xf7\x17\x0f\x89\x67\xb3\xd6\xd5\x4d\x4a\x3b\xb1\xbf\xbc\x4c\x90\xe3\x42\xc9\x2b\x17\x89\x15\xbd\xbf\xa6\xe8\xc2\x9b\x73\x59\x32\xe5\x10\x3a\x58\xfb\x7b\x53\x67\x6a\x5c\x06\x74\x0d\x0b\xa3\x47\x05\xdb\x95\xb1\x08\x96\xa4\xe2\xbe\x9b\xac\x6e\x4d\x58\x8d\x67\x9e\xfa\xf2\xe8\x75\x82\x3a\xad\xc8\xa9\xeb\x8e\xd4\xe8\xba\x9a\x1a\xc8\xb4\xdc\x1f\x30\xff\xa8\x5a\x1f\x02\x47\x27\x1f\x6d\xba\x22\x8c\xc7\x22\xd1\x22\xb4\xe4\x8f\x98\x32\xbc\x0b\xf9\x3e\xda\x98\xb5\x23\x55\x7d\x36\x7e\xc6\x34\xe2\xe4\x1a\x2d\xa2\x6b\xf8\x1e\x14\x2d\x2c\xe2\x6e\xc7\xc3\x72\xbc\x48\x0c\xfd\x24\x2d\x1b\x1b\x9f\x83\xea\x87\xb4\x11\xbf\xb5\x45\x5b\x8a\x4c\x2a\x95\x9a\xf7\x49\xda\x6a\x49\x86\x0f\xb6\x28\x8f\xf9\xa6\xc7\xa4\xba\x79\x0e\xc5\xf8\x84\x54\xac\xbe\x20\xbf\xbc\x2e\x78\x73\x59\xa5\xc4\x65\x79\x7f\x79\xf5\x20\x0e\xe2\x4f\x00\x00\x00\xff\xff\x5a\xae\x53\x6b\xc3\x04\x00\x00")

func fuzzingUtilsGoBytes() ([]byte, error) {
	return bindataRead(
		_fuzzingUtilsGo,
		"fuzzing/utils.go",
	)
}

func fuzzingUtilsGo() (*asset, error) {
	bytes, err := fuzzingUtilsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fuzzing/utils.go", size: 1219, mode: os.FileMode(420), modTime: time.Unix(1600785780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
	"fuzzing/common.go":         fuzzingCommonGo,
	"fuzzing/utils.go":          fuzzingUtilsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
	"fuzzing": &bintree{nil, map[string]*bintree{
		"common.go": &bintree{fuzzingCommonGo, map[string]*bintree{}},
		"utils.go":  &bintree{fuzzingUtilsGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
