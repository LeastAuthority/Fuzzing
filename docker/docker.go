// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package docker generated by go-bindata.// sources:
// docker/go-fuzz.dockerfile
// docker/go-fuzz.sh
package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xeb\x30\x10\x85\xf7\x7a\x8a\x03\x77\x2d\x1b\xc3\x0d\x85\x40\x37\x4d\xda\x12\xda\xc4\xc5\x10\x4a\x97\xb2\xf5\x8b\x65\x8d\x88\xa4\x94\xe6\xe9\x8b\x4d\x03\xe9\xae\x2b\x89\x99\x39\x1f\xdf\x79\xea\xda\x3d\x0c\x79\x11\xcc\xba\xa9\x9a\xff\x5c\xf8\xe8\x82\x62\xec\x1f\x76\x21\x65\xe1\x3d\xa4\x8a\x09\x22\x48\x94\xa4\x74\xf1\xc8\xd6\x05\x93\x58\x77\x3c\x40\xc4\x11\x42\x4a\xf4\xc5\x79\xc9\x7b\x91\x14\xe2\x68\x06\x0a\xda\x19\xf4\x22\x59\x9c\xdd\x04\xe3\xf2\x2d\xcf\x10\xd7\xe5\x72\x59\x00\xcf\x6d\xd3\x34\xfb\x76\x7b\x7c\x7d\xbc\x27\xad\x61\x08\x46\x65\xf0\x32\x87\x6c\xe9\xab\x81\xa6\x5a\x9e\xbf\xca\x48\xe7\xfa\x27\x78\x7d\xff\x70\xc2\x17\x31\xf6\xde\x76\x2f\xdb\x5d\x87\x3a\x4f\xb1\x9e\xe7\x2e\x98\xd9\xe8\xf0\xb0\x86\xa6\xd3\x5c\x0c\x9f\x2e\x5b\x48\x1a\x46\x75\xe2\x03\x4d\x91\x92\x62\x9b\xf6\xed\x03\xd5\x15\x56\x25\x8b\x9b\xff\xe2\x3f\xd8\x89\x24\xee\x56\xab\x5f\x1b\xb6\xd9\x6f\x97\xfa\xec\x3b\x00\x00\xff\xff\x7b\x8f\x6d\x78\x5f\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 351, mode: os.FileMode(420), modTime: time.Unix(1600679318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xc1\x6e\xeb\x36\x10\xbc\xef\x57\x4c\x6c\x21\x88\x8b\x52\x6e\x7c\x8c\xab\xa0\x2d\x8a\x77\xcd\xe5\xdd\x0c\x23\xa6\xa4\x95\x44\x98\x21\x05\x92\x8a\x91\x38\xfe\xf7\x07\x52\xb2\x8d\xf8\x9d\x44\x0d\x76\x77\x66\x67\x67\x7e\x87\xe5\xe0\xdd\xb2\x54\x66\xc9\xe6\x1d\xa5\xf4\x1d\x79\x0e\x10\x4c\x34\xc7\xcf\x97\xff\x5f\x9e\xe0\xb8\xd7\xb2\x62\x84\x4e\x79\xf8\x8e\xb5\x86\xaf\x9c\xea\x03\xcd\x91\x3d\x42\xa0\x19\x3e\x3f\xd9\xa1\x97\xd5\x5e\xb6\x1c\xd1\x15\x04\x8c\x7c\x63\xd8\x06\xa1\xe3\x73\x45\x33\x98\x2a\x28\x6b\xf0\x70\x50\x5a\xa3\x64\x0c\x9e\x6b\x34\xd6\xa5\xaa\xdd\xc1\xba\x7d\xad\xdc\x0e\xd2\xb5\xc3\x1b\x9b\x80\x60\xb1\x6b\xad\x88\xfd\xbb\x45\x4e\x73\xec\x84\x28\x07\xa5\xeb\x1d\x04\x1e\x6c\x1f\xa7\x49\xbd\x40\xc2\xfc\x8d\x12\x94\xdc\x58\x17\x3f\xca\xb4\x70\x83\x89\x03\xfe\xad\x6b\x35\x76\x45\x16\x8f\xc6\x6a\x6d\x0f\xb1\x60\x27\x44\x64\x66\xf4\xd2\x47\x59\xb5\x72\x5c\x05\xfd\xf1\x4d\x44\x4e\xa4\x1a\x6c\x36\xc8\xe6\x10\x3a\x60\x85\xed\x76\x1d\xd5\x1b\x02\xb8\xea\x2c\x66\x83\x97\x2d\x3f\x81\x4d\x70\x1f\xbd\x55\x26\xe4\xbe\xc3\xdf\x37\xd2\x7a\x19\xba\xe7\x0b\x1a\x8d\x49\x86\x3d\x63\x23\xca\xaf\x69\xc7\x2d\x36\x42\x60\x33\x51\x47\xb9\x9b\x3f\x91\xe7\xf9\x76\xbb\x9d\x51\xa3\x88\xfa\x7d\x5b\x64\x8f\xe4\x3b\xd5\x04\x8a\xed\xd7\xbf\xf3\xf1\x06\x53\xdb\xf1\x72\x9d\xac\xf6\x39\x4d\x16\x17\xf9\xb2\xd1\xcc\x15\x2f\x27\xc0\x2f\xb3\x63\x9c\x70\xa2\x52\x99\x22\x3b\xf6\xfb\xf6\x69\x75\x4a\xc4\xf9\xa7\xea\x23\xfa\x1a\x35\x17\xd9\x71\xea\x38\x2d\xb3\x63\xa9\xcc\x89\xa8\x93\xfe\x35\x0a\x0e\x45\x23\xb5\x67\x4a\xe2\x1f\x16\x38\x12\x30\x89\x1f\x17\x42\x9a\x7b\x22\xe0\xed\x7d\x7a\x5f\x18\x90\xa6\x25\x8e\x13\x9d\x88\xbc\x66\xee\xb1\xa2\x43\xa7\x34\x9f\x0d\x6f\x03\xfe\x4a\x86\xd7\x96\x80\x4a\x7a\x8e\x09\x54\xd1\x7b\x51\xe2\x0b\x93\x71\x0b\x02\xce\xd7\xf8\x2f\x02\xf1\xbc\xc9\xc3\x52\x19\xe9\x3e\xf2\x3c\x9f\xa5\x92\x54\x9d\x5e\xd7\x1d\x82\x1b\x38\x41\xa3\x91\xf1\xb5\x5e\x47\x02\xb1\xb8\x81\x1d\xfb\xf0\x1a\x43\x54\x64\xff\x8c\xe3\x1c\xcb\xfd\xb5\xe3\x8f\xdb\x86\x84\xb2\x97\x15\xd5\xd6\xf0\x25\x49\x17\x6e\x14\x05\x66\xc9\xc3\x19\xee\xef\x71\x07\xc1\xc8\xce\xae\xfc\x1e\xb4\x1f\xd7\x8d\x60\x6c\x40\x63\x07\x53\xaf\xc7\xa5\x94\x69\xa7\x2d\xc7\x1d\x63\x5c\xbe\xe9\xa5\x73\xac\xc4\x78\xf0\x8b\xf9\x10\x31\x8d\xc5\x14\x07\x88\x73\x62\xae\x87\x47\x76\x99\x44\xbf\x02\x00\x00\xff\xff\x75\x72\x40\xdc\x42\x04\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 1090, mode: os.FileMode(493), modTime: time.Unix(1600683207, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
