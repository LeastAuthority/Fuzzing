// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package docker generated by go-bindata.// sources:
// docker/go-fuzz.dockerfile
// docker/go-fuzz.sh
package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x81\x9e\x65\x63\xe8\x29\xd0\x4b\xe3\xb6\x84\xd6\x71\x31\x84\xd2\xa3\x6c\xfd\x58\x58\xd6\x8a\x48\x72\x69\x9e\xbe\xd8\x34\x90\x63\x4e\xbb\x2c\x3b\x1f\xf3\xbd\x76\x6d\x03\x43\x4e\x78\xb3\xab\x8a\xea\x91\x0b\x17\xac\x57\x8c\x3d\xe0\xe0\x63\x12\xce\x41\xaa\x10\x21\xbc\x44\x8e\x4a\x67\x87\x34\x5a\x6f\x22\xeb\x4e\x47\x88\x30\x41\x48\x89\x3e\x5b\x27\x79\x2f\xa2\x42\x98\xcc\x40\x5e\x5b\x83\x5e\xc4\x11\x8b\x9d\x61\x6c\xba\xe5\x19\xe2\x3a\x5f\x2e\x1b\xe0\xad\xad\xaa\xaa\x69\xeb\xd3\xc7\xcb\x13\x69\x0d\x43\x30\x2a\x81\xe7\x35\x34\xe6\xbe\x18\x68\x2e\xe5\xf2\x9b\x27\x5a\xca\xff\xe0\x75\xde\xf1\xc2\xb7\x62\xec\xab\xed\xde\xeb\x43\x87\x32\xcd\xa1\x5c\xef\xd6\x9b\xb5\xd1\xf1\x79\x07\x4d\xe7\x55\x0c\x3f\x36\x8d\x90\x34\x4c\xea\xcc\x07\x9a\x03\x45\xc5\xf6\xed\xe7\x37\x8a\x2b\xac\x88\x23\x6e\x76\xc6\xf6\x4d\xbd\x49\xb2\xbf\x00\x00\x00\xff\xff\x57\xaa\xa2\x00\x45\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 325, mode: os.FileMode(420), modTime: time.Unix(1600258069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x73\x9b\x30\x10\x85\xef\xfb\x2b\x5e\x63\x0e\x71\xa7\xc2\x4d\x8e\xa5\x64\xda\xdf\xc1\x30\x45\xc0\x02\x1a\x14\x89\x91\x44\x3d\x49\x9a\xff\xde\x59\x6c\xc7\x13\x9f\x80\xc7\xbe\x7d\xdf\xae\xb4\xfb\x82\xc3\x1a\xc3\xa1\x35\xee\xc0\xee\x2f\x5a\x1d\x27\x8a\x9c\xa0\x98\x68\x87\xec\x01\x0a\xc3\xfa\xfa\xca\x01\x8b\xee\x66\x3d\xb2\xa8\x8f\x50\x70\xfa\x99\xe1\x07\xa4\x89\x2f\x15\xc3\xea\xba\x64\xbc\xc3\xfd\xd1\x58\x8b\x96\xb1\x46\xee\x31\xf8\xb0\x55\x35\x47\x1f\xe6\xde\x84\x06\x3a\x8c\xeb\x33\xbb\x84\xe4\xd1\x8c\x5e\x89\xbf\xd9\xe7\xb4\x43\xa3\x54\xbb\x1a\xdb\x37\x50\xb8\xf7\x8b\x74\xd3\x76\x8f\x4d\x8b\x37\x24\x68\x79\xf0\x41\x1e\xc6\x8d\x08\xab\x93\x06\xbf\xfb\xde\x9c\x5c\x92\x12\x31\x78\x6b\xfd\x51\x0a\x1a\xa5\x24\x99\xb1\xe8\x28\x58\xbd\x09\xdc\x25\xfb\xf2\x09\x22\x27\x32\x03\xaa\x0a\xd9\x0e\xca\x26\x3c\xa2\xae\x0b\xa1\x77\x04\x00\xdc\x4d\x1e\x77\x6b\xd4\x23\xff\x00\xbb\x14\x5e\x16\x6f\x5c\xca\xe3\x84\x9f\x37\x70\x8b\x4e\xd3\xd3\x87\x2a\xab\xd9\x56\xf6\x84\x4a\xb5\xff\xce\x53\xd6\xa8\x94\x42\x75\x0e\x17\xe0\xea\x1b\xf2\x3c\xaf\xeb\xfa\x8e\x06\x43\xb4\xcc\x63\x99\x3d\x50\x9c\xcc\x90\x48\xec\xd7\x2f\x3a\x4e\xc6\xf2\x05\x75\x4c\xf8\xbe\xa1\xf6\x9e\x3a\x1d\x59\x4e\xce\x08\xf3\x35\x6c\xbf\x4d\x70\xce\x3a\x49\xc8\xde\x96\x79\x7c\xdf\x7e\x9c\xba\xca\x5b\x51\x88\x4f\xed\x6f\xe4\xc0\x31\xfd\x91\x9d\x96\xd9\xaf\x4d\x68\x03\xeb\xf9\xea\xf8\x7a\x6b\x28\x0a\xe2\xa8\x3b\xea\xbd\x63\xa2\x4f\x76\xba\x8c\xac\x5a\xe3\xca\x13\xc5\x26\xe4\xaf\x66\x81\x92\x6d\x95\xd9\x9b\x0c\xfc\x0e\x75\xbe\x36\x65\x7e\xb8\x48\xd9\x47\xb3\xff\x01\x00\x00\xff\xff\x89\x81\xe8\x08\xc0\x02\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 704, mode: os.FileMode(428), modTime: time.Unix(1600269595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
