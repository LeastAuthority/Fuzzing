// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// docker/docker-compose.yml
// docker/go-fuzz.dockerfile
// docker/go-fuzz.sh
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xcd\xaa\xc3\x20\x14\x84\xf7\x3e\xc5\xc1\xbd\x7a\xe1\xc2\x5d\x08\x77\xd9\xbe\x87\x35\x27\xa9\xd4\x3f\xfc\x09\xa9\x4f\x5f\xd4\xd0\xb8\x1a\xbf\x19\xe6\xcc\x8e\x29\x9b\xe0\x25\xd0\x5f\x4a\x32\xa6\xdd\x68\xcc\x92\x00\xac\xb5\x35\x4c\x3f\x5d\x02\x18\xa7\x36\x94\xb0\x05\xd6\xf1\x40\x8f\x6a\xec\x32\x5d\x00\x1d\x7c\xc1\xa3\x48\xe0\x62\x09\xfa\x85\xe9\xe4\xf3\xb3\x1a\x8b\x97\x25\xce\x16\x7e\x99\x23\xbd\x07\x5b\xdd\xbc\xdd\x1f\x03\x2e\x45\x71\x51\xf4\xac\xf1\xdb\xc0\xe8\x4b\x7a\xc7\x60\x7c\x91\x40\xbf\x45\xf9\x49\xc9\x5c\xe1\x9c\xf2\x8b\x04\xca\x05\x1e\x4e\x45\x8b\x70\xaf\xad\xdd\x0e\xe5\xba\x66\x6c\x8c\x06\xc6\x80\xc5\x14\x74\xfe\xff\xa3\xe4\x13\x00\x00\xff\xff\x39\x0d\x70\x0e\x01\x01\x00\x00")

func dockerDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dockerDockerComposeYml,
		"docker/docker-compose.yml",
	)
}

func dockerDockerComposeYml() (*asset, error) {
	bytes, err := dockerDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/docker-compose.yml", size: 257, mode: os.FileMode(420), modTime: time.Unix(1600198584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x81\x9e\x65\x63\xe8\x29\xd0\x4b\xe3\xb6\x84\xd6\x71\x31\x84\xd2\xa3\x6c\xfd\x58\x58\xd6\x8a\x48\x72\x69\x9e\xbe\xd8\x34\x90\x63\x4e\xbb\x2c\x3b\x1f\xf3\xbd\x76\x6d\x03\x43\x4e\x78\xb3\xab\x8a\xea\x91\x0b\x17\xac\x57\x8c\x3d\xe0\xe0\x63\x12\xce\x41\xaa\x10\x21\xbc\x44\x8e\x4a\x67\x87\x34\x5a\x6f\x22\xeb\x4e\x47\x88\x30\x41\x48\x89\x3e\x5b\x27\x79\x2f\xa2\x42\x98\xcc\x40\x5e\x5b\x83\x5e\xc4\x11\x8b\x9d\x61\x6c\xba\xe5\x19\xe2\x3a\x5f\x2e\x1b\xe0\xad\xad\xaa\xaa\x69\xeb\xd3\xc7\xcb\x13\x69\x0d\x43\x30\x2a\x81\xe7\x35\x34\xe6\xbe\x18\x68\x2e\xe5\xf2\x9b\x27\x5a\xca\xff\xe0\x75\xde\xf1\xc2\xb7\x62\xec\xab\xed\xde\xeb\x43\x87\x32\xcd\xa1\x5c\xef\xd6\x9b\xb5\xd1\xf1\x79\x07\x4d\xe7\x55\x0c\x3f\x36\x8d\x90\x34\x4c\xea\xcc\x07\x9a\x03\x45\xc5\xf6\xed\xe7\x37\x8a\x2b\xac\x88\x23\x6e\x76\xc6\xf6\x4d\xbd\x49\xb2\xbf\x00\x00\x00\xff\xff\x57\xaa\xa2\x00\x45\x01\x00\x00")

func dockerGoFuzzDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzDockerfile,
		"docker/go-fuzz.dockerfile",
	)
}

func dockerGoFuzzDockerfile() (*asset, error) {
	bytes, err := dockerGoFuzzDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.dockerfile", size: 325, mode: os.FileMode(420), modTime: time.Unix(1600258069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerGoFuzzSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x73\x9b\x30\x10\x85\xef\xfb\x2b\x5e\x63\x0e\x71\xa7\xc2\x4d\x8e\xa5\x64\xd2\xdf\xc1\x30\x45\xc0\x02\x1a\x88\xc4\x48\xa2\x6e\x9c\xe6\xbf\x77\x16\xec\x78\xe2\x13\xf0\xd8\xb7\xfb\xbd\x95\x76\x5f\x70\x58\x82\x3f\xd4\xc6\x1e\xd8\xfe\x41\xad\xc3\x40\x81\x23\x14\xff\x25\xda\x21\x79\x80\x42\xb7\x9c\x4e\xec\x31\xeb\x66\xd4\x3d\x8b\xfa\x08\x05\xab\x5f\x18\xae\x43\x1c\xf8\x52\xd1\x2d\xb6\x89\xc6\x59\xdc\x1f\xcd\x34\xa1\x66\x2c\x81\x5b\x74\xce\xaf\x55\xd5\xd1\xf9\xb1\x35\xbe\x82\xf6\xfd\xf2\xc2\x36\x22\x3a\x54\xbd\x53\xe2\xaf\xf6\x29\xed\x50\x29\x55\x2f\x66\x6a\x2b\x28\xdc\xbb\x59\xba\xe9\x69\x8f\x55\x0b\x37\x24\xa8\xb9\x73\x5e\x1e\xc6\xf6\xf0\x8b\x95\x06\xbf\xda\xd6\x6c\x2e\x99\x12\xd0\xb9\x69\x72\x47\x29\xa8\x94\x92\xc9\x8c\x59\x07\xc1\x6a\x8d\xe7\x26\x4e\xaf\x9f\x20\x52\x22\x6e\x06\x87\xbb\xe4\xf9\x8e\x4c\x87\xa2\x40\xb2\x83\x9a\x22\x1e\x51\x96\x99\xe4\xb0\x04\x00\x5b\xd5\x12\x74\xcf\x3f\xc0\x36\xfa\xd7\xd9\x19\x1b\xd3\x30\xe0\xe7\x0d\xe6\xac\xe3\xf0\xf4\xa1\xca\x92\xd6\xe5\x3d\xa1\x50\xf5\xbf\x73\xde\x12\x85\x52\x28\xce\x18\x82\x5e\x7c\x43\x9a\xa6\x65\x59\xde\x51\x67\x88\xe6\xb1\xcf\x93\x07\x0a\x83\xe9\x22\x89\xfd\xfa\x45\xc7\xc1\x4c\x7c\x41\xed\x23\xbe\xaf\xa8\xad\xa3\x46\x07\x96\x33\x34\xc2\x7c\x1d\xb6\x5f\x13\x9c\x67\x6d\x12\x92\xb7\x79\xec\xdf\xd7\x1f\x5b\x57\x79\xcb\x32\xf1\xa9\xfd\x8d\xec\x39\xc4\xdf\xb2\xdd\x3c\x79\x5e\x85\xda\xb3\x1e\xaf\x8e\xaf\xb7\x86\x2c\x23\x0e\xba\xa1\xd6\x59\x26\xfa\x64\xa7\x4b\x64\x55\x1b\x9b\x6f\x14\xab\x90\x9e\xcc\x0c\x25\xdb\xca\x93\x37\x09\xfc\x0e\x75\xbe\x40\x79\x7a\xb8\x48\xc9\x47\xb3\xff\x01\x00\x00\xff\xff\x02\x2f\xf3\xf8\xcb\x02\x00\x00")

func dockerGoFuzzShBytes() ([]byte, error) {
	return bindataRead(
		_dockerGoFuzzSh,
		"docker/go-fuzz.sh",
	)
}

func dockerGoFuzzSh() (*asset, error) {
	bytes, err := dockerGoFuzzShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker/go-fuzz.sh", size: 715, mode: os.FileMode(428), modTime: time.Unix(1600267724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker/docker-compose.yml": dockerDockerComposeYml,
	"docker/go-fuzz.dockerfile": dockerGoFuzzDockerfile,
	"docker/go-fuzz.sh":         dockerGoFuzzSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docker": &bintree{nil, map[string]*bintree{
		"docker-compose.yml": &bintree{dockerDockerComposeYml, map[string]*bintree{}},
		"go-fuzz.dockerfile": &bintree{dockerGoFuzzDockerfile, map[string]*bintree{}},
		"go-fuzz.sh":         &bintree{dockerGoFuzzSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
